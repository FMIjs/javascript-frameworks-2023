{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  // users$$ = new BehaviorSubject<IUser[]>([]);\n  constructor(http) {\n    this.http = http;\n  }\n  loadUsers(filter) {\n    const filterString = filter ? `?${Object.keys(filter).map(key => `${key}=${filter[key]}`).join('&')}` : '';\n    return this.http.get(`https://jsonplaceholder.typicode.com/users${filterString}`);\n  }\n  loadUser(id) {\n    return this.http.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":";;AAYA,OAAM,MAAOA,WAAW;EAEtB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,SAASA,CAACC,MAAkC;IAC1C,MAAMC,YAAY,GAAGD,MAAM,GACvB,IAAIE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,IAAIL,MAAM,CAACK,GAAG,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,GACvE,EAAE;IAEN,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAU,6CAA6CN,YAAY,EAAE,CAAC;EAC5F;EAEAO,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAQ,8CAA8CE,EAAE,EAAE,CAAC;EACjF;;AAhBWb,WAAW;mBAAXA,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXjB,WAAW;SAAXA,WAAW;EAAAkB,OAAA,EAAXlB,WAAW,CAAAmB;AAAA","names":["UserService","constructor","http","loadUsers","filter","filterString","Object","keys","map","key","join","get","loadUser","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sourceRoot":"","sources":["/Users/alexkostov/dev/fmiJS/javascript-frameworks-2023/week14/lecture/src/app/user/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface IUser {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  // ...\n}\n\n@Injectable()\nexport class UserService {\n\n  // users$$ = new BehaviorSubject<IUser[]>([]);\n\n  constructor(private http: HttpClient) { }\n\n  loadUsers(filter?: { [key: string]: string }) {\n    const filterString = filter\n      ? `?${Object.keys(filter).map(key => `${key}=${filter[key]}`).join('&')}`\n      : '';\n\n    return this.http.get<IUser[]>(`https://jsonplaceholder.typicode.com/users${filterString}`);\n  }\n\n  loadUser(id: number) {\n    return this.http.get<IUser>(`https://jsonplaceholder.typicode.com/users/${id}`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}