{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class TestDeactivate {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canDeactivate(component, currentRoute, currentState, nextState) {\n    return true;\n  }\n}\nTestDeactivate.ɵfac = function TestDeactivate_Factory(t) {\n  return new (t || TestDeactivate)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nTestDeactivate.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TestDeactivate,\n  factory: TestDeactivate.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAiB;EAExEC,aAAaA,CACXC,SAAc,EACdC,YAAoC,EACpCC,YAAiC,EACjCC,SAA8B;IAE9B,OAAO,IAAI;EACb;;AAXWR,cAAc;mBAAdA,cAAc,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;AAAA;AAAdd,cAAc;SAAdA,cAAc;EAAAe,OAAA,EAAdf,cAAc,CAAAgB,IAAA;EAAAC,UAAA,EADD;AAAM","names":["TestDeactivate","constructor","router","authService","canDeactivate","component","currentRoute","currentState","nextState","i0","ɵɵinject","i1","Router","i2","AuthService","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["/Users/alexkostov/dev/fmiJS/javascript-frameworks-2023/week14/lecture/src/app/guards/test.deactivate.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class TestDeactivate implements CanDeactivate<boolean> {\n\n  constructor(private router: Router, private authService: AuthService) { }\n\n  canDeactivate(\n    component: any,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}