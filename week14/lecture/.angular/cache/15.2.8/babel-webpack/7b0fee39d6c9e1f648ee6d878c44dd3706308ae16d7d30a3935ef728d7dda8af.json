{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class TestLoad {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canLoad(route, segments) {\n    return this.authService.user$.pipe(map(user => !!user));\n  }\n}\nTestLoad.ɵfac = function TestLoad_Factory(t) {\n  return new (t || TestLoad)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nTestLoad.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TestLoad,\n  factory: TestLoad.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAIpC,OAAM,MAAOC,QAAQ;EAEnBC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;EAAiB;EAExEC,OAAOA,CAACC,KAAY,EAAEC,QAAsB;IAC1C,OAAO,IAAI,CAACH,WAAW,CAACI,KAAK,CAACC,IAAI,CAChCT,GAAG,CAACU,IAAI,IAAI,CAAC,CAACA,IAAI,CAAC,CACpB;EACH;;AARWT,QAAQ;mBAARA,QAAQ,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;AAAA;AAARf,QAAQ;SAARA,QAAQ;EAAAgB,OAAA,EAARhB,QAAQ,CAAAiB,IAAA;EAAAC,UAAA,EADK;AAAM","names":["map","TestLoad","constructor","router","authService","canLoad","route","segments","user$","pipe","user","i0","ɵɵinject","i1","Router","i2","AuthService","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["/Users/alexkostov/dev/fmiJS/javascript-frameworks-2023/week14/lecture/src/app/guards/test.load.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Route, UrlSegment, CanLoad, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class TestLoad implements CanLoad {\n\n  constructor(private router: Router, private authService: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n    return this.authService.user$.pipe(\n      map(user => !!user)\n    );\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}