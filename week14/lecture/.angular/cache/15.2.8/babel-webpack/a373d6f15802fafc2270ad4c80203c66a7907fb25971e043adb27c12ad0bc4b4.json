{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.users$$ = new BehaviorSubject([]);\n    this.users$ = this.users$$.asObservable();\n  }\n  loadAndStoreUsers(filter) {\n    return this.loadUsers(filter).pipe(switchMap(users => {\n      this.users$$.next(users);\n      return this.user$;\n    }));\n  }\n  loadUsers(filter) {\n    const filterString = filter ? `?${Object.keys(filter).map(key => `${key}=${filter[key]}`).join('&')}` : '';\n    return this.http.get(`https://jsonplaceholder.typicode.com/users${filterString}`);\n  }\n  loadUser(id) {\n    return this.http.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,SAAS,QAAQ,gBAAgB;;;AAW1C,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,OAAO,GAA6B,IAAIL,eAAe,CAAU,EAAE,CAAC;IACpE,KAAAM,MAAM,GAAG,IAAI,CAACD,OAAO,CAACE,YAAY,EAAE;EAEI;EAExCC,iBAAiBA,CAACC,MAAkC;IAClD,OAAO,IAAI,CAACC,SAAS,CAACD,MAAM,CAAC,CAACE,IAAI,CAChCV,SAAS,CAACW,KAAK,IAAG;MAChB,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACD,KAAK,CAAC;MACxB,OAAO,IAAI,CAACE,KAAK;IACnB,CAAC,CAAC,CACH;EACH;EAEAJ,SAASA,CAACD,MAAmC;IACzC,MAAMM,YAAY,GAAGN,MAAM,GACvB,IAAIO,MAAM,CAACC,IAAI,CAACR,MAAM,CAAC,CAACS,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,IAAIV,MAAM,CAACU,GAAG,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,GACvE,EAAE;IACN,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAU,6CAA6CN,YAAY,EAAE,CAAC;EAC5F;EAEFO,QAAQA,CAACC,EAAU;IACf,OAAO,IAAI,CAACnB,IAAI,CAACiB,GAAG,CAAQ,8CAA8CE,EAAE,EAAE,CAAC;EACjF;;AAzBSrB,WAAW;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXzB,WAAW;SAAXA,WAAW;EAAA0B,OAAA,EAAX1B,WAAW,CAAA2B;AAAA","names":["BehaviorSubject","switchMap","UserService","constructor","http","users$$","users$","asObservable","loadAndStoreUsers","filter","loadUsers","pipe","users","next","user$","filterString","Object","keys","map","key","join","get","loadUser","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sourceRoot":"","sources":["/Users/alexkostov/dev/fmiJS/javascript-frameworks-2023/week14/lecture/src/app/user/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nexport interface IUser {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  // ...\n}\n\n@Injectable()\nexport class UserService {\n\n  users$$: BehaviorSubject<IUser[]> = new BehaviorSubject<IUser[]>([]);\n  users$ = this.users$$.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  loadAndStoreUsers(filter?: { [key: string]: string }): Observable<IUser[]> {\n    return this.loadUsers(filter).pipe(\n      switchMap(users => {\n        this.users$$.next(users);\n        return this.user$;\n      })\n    )\n  }\n\n  loadUsers(filter ?: { [key: string]: string }) {\n      const filterString = filter\n        ? `?${Object.keys(filter).map(key => `${key}=${filter[key]}`).join('&')}`\n        : '';\n      return this.http.get<IUser[]>(`https://jsonplaceholder.typicode.com/users${filterString}`);\n    }\n\n  loadUser(id: number) {\n      return this.http.get<IUser>(`https://jsonplaceholder.typicode.com/users/${id}`);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}